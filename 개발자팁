🧠 1️⃣ “코드는 사람한테 보여주는 글이다”

컴퓨터는 결국 다 이해한다. 문제는 사람이 이해 못하는 코드다.

👉 팁:

변수 이름을 정확하게 짓자. (짧게가 아니라, 의미 있게)

// 나쁜 예
int a;
// 좋은 예
int userCount;


함수 이름은 “무엇을 하는가”가 드러나야 한다.

void calc();        // ❌ 뭐 계산?
void calculateTax(); // ✅ 세금 계산임이 명확


💬 좋은 코드 = 내가 한 달 뒤에 봐도 무슨 뜻인지 바로 알 수 있는 코드.

🧩 2️⃣ “작게 나누고, 자주 저장하고, 자주 실행하라”

한 번에 완벽하게 짜려 하지 말고, 작은 단위로 검증하자.

👉 팁:

기능 하나 만들면 컴파일 → 실행 → 확인 반복

작은 단위로 함수 쪼개기 (100줄짜리 함수보다 10줄짜리 10개가 낫다)

printf, cout, log를 이용해 중간중간 값을 확인

💬 버그는 코드가 길어서 생기는 게 아니라,
“어디가 문제인지 모르는 상태에서 고치려 해서” 생깁니다.

⚙️ 3️⃣ “디버깅은 습관이다”

디버깅(debugging)은 문제를 고치는 과정이 아니라, 이해하는 과정이에요.

👉 팁:

오류 메시지는 끝까지 읽자. 대부분 원인 힌트가 들어 있음.

printf, cout 로그를 의도적으로 넣어서 흐름을 추적해라.

IDE(Visual Studio, VSCode, CLion 등)의 중단점(breakpoint), step over, watch 기능 배우기.

💬 초보자는 “왜 안 되지?”라고 말하지만,
숙련자는 “어디까지는 됐고, 어디서부터 안 된다”라고 말합니다.

📘 4️⃣ “반복되는 건 함수화하라”

복붙은 단기적으로 편하지만, 유지보수 지옥의 시작이에요.

👉 팁:

3번 이상 같은 코드가 반복되면 함수로 빼라.

“의미 단위”로 묶어라.
예를 들어 "로그인 인증", "데이터 검증", "응답 포맷" 같은 걸 함수로 분리.

💬 복붙 대신 함수화 = 코드의 재사용성 + 유지보수성 향상

🔐 5️⃣ “입출력은 항상 믿지 마라”

프로그램은 외부 입력에 쉽게 깨질 수 있어요.

👉 팁:

사용자 입력, 파일 내용, 네트워크 데이터 등은 항상 검증(validate) 해야 함.

if (userInput == nullptr || userInput.empty()) return false;


에러 발생 시 “이유를 로그로 남기기”.

💬 “잘못된 입력이 들어올 리 없겠지?” → 항상 들어옵니다 😂

🧭 6️⃣ “도구를 잘 다루는 사람이 빠르다”

코딩 실력보다 중요한 건 IDE, Git, 검색력이에요.

👉 팁:

Ctrl + 클릭: 함수/변수 선언부로 바로 이동

Ctrl + /: 빠른 주석

Ctrl + Shift + F: 전체 검색

Ctrl + Z / Ctrl + Y: 되돌리기 / 다시 실행

Git은 매일 써보기 (commit, push, pull, diff, log)

💬 도구를 잘 쓰면 머리를 덜 써도 된다.

🔄 7️⃣ “남이 짠 코드 읽는 습관을 들여라”

배움은 타인의 코드에서 온다.

👉 팁:

오픈소스 프로젝트(GitHub)에서 단순한 C/C++ 코드 읽기

함수 이름, 변수 이름, 로직 구조를 “왜 이렇게 했을까?” 생각하면서 보기

ChatGPT에 “이 코드 설명해줘” 하면서 분석 연습

💬 좋은 코드를 많이 보면, 나쁜 코드를 자연스럽게 걸러내게 됩니다.

🧩 8️⃣ “주석은 왜가 아니라, 무엇과 어떻게를 설명하라”

좋은 코드는 주석이 없어도 이해되는 코드
하지만 필요한 주석은 반드시 써야 한다.

👉 팁:
// ❌ 잘못된 주석
// i에 1을 더한다
i++;

// ✅ 좋은 주석
// 사용자 ID 목록을 모두 초기화 (DB 초기화 후 캐시 갱신)
initializeUserList();


💬 주석은 “내가 이걸 왜 이렇게 했는가”를 미래의 나에게 설명하는 편지.

💬 9️⃣ “완벽보단 일단 동작하게, 그리고 개선하자”

완벽주의는 개발자의 함정이에요.

👉 팁:

일단 동작하는 최소 버전(MVP) 만들기

이후에 리팩토링(정리)

그 다음 최적화 (성능 개선)

💬 “작동하는 60점짜리 코드”가 “안 돌아가는 100점짜리 코드”보다 낫습니다.

🧠 10️⃣ “컴퓨터보다 사람이 더 무섭다”

코드가 돌아가는 게 중요한 게 아니라,
팀이 함께 돌아가는 게 중요해요.

👉 팁:

내 코드가 다른 사람에게 쉽게 읽히도록 짜기

버그 숨기지 말고, 빨리 공유하기

코드를 설명할 수 있어야 진짜 내 코드다

💬 혼자 빨리 가는 것보다, 같이 오래 가는 게 더 어려운 일이에요.

✅ 정리 요약
분류	핵심 문장
코드	코드는 사람에게 보여주는 글이다
작업	작게 나누고 자주 실행하라
디버깅	“어디까지 됐고 어디서 안 됐는지”를 파악하라
함수	반복되면 함수로 묶어라
입력	외부 입력은 항상 의심하라
도구	IDE 단축키와 Git은 필수
학습	남의 코드 많이 읽기
주석	“무엇/왜”를 명확히 적기
개발	완벽보다 작동, 그다음 개선
협업	코드보다 사람이 더 중요하다
